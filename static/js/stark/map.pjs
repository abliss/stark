// Controls the size of each square. Increase for bigger squares
int size = 12;

// Controls how much space there is in between each square
int spacing = 10;

// A top / left margin
int margin = 5;

// The variables holding the stark x / y map center position that will
// actually get displayed, which may vary from the stark.map values for
// example in the case of a map shift where the animation needs to be smooth.
int center_x;
int center_y;

// How fast the map catches up when moving. Lower values for fast catchup
int delay = 3;

void setup()
{
    stroke(0);
    strokeWeight(1);
    frameRate(15);
}

void keyPressed()
{
    if (!$(stark.player).attr('builder_mode')) {
        if (key == CODED) {
            if (keyCode == UP) { process_command('north'); }
            else if (keyCode == RIGHT) { process_command('east'); }
            else if (keyCode == DOWN) { process_command('south'); }
            else if (keyCode == LEFT) { process_command('west'); }
        }
    }
}

var draw_room = function(room, is_player_room) {
    // determine the true x starting position of the room in the canvas
    //true_x = (room.xpos + Math.round(stark.map.width / 2) - center_x) * (size + spacing);
    //true_y = (room.ypos + Math.round(stark.map.height / 2) - center_y) * (size + spacing);
    true_x = (room.xpos + Math.round((stark.map.width - 1) / 2) - center_x) * (size + spacing);
    true_y = (room.ypos + Math.round((stark.map.height - 1) / 2) - center_y) * (size + spacing);


    // margin
    true_x += margin;
    true_y += margin;

    // connectors
    if (room.north == 'Normal') {
        line(true_x + Math.round(size / 2), true_y,
             true_x + Math.round(size / 2), true_y - Math.round(spacing / 2));
    }
    if (room.east == 'Normal') {
        line(true_x + size, true_y + Math.round(size / 2),
             true_x + size + Math.round(spacing / 2), true_y + Math.round(size / 2));
    }
    if (room.south == 'Normal') {
        line(true_x + Math.round(size / 2), true_y + size,
             true_x + Math.round(size / 2), true_y + size + Math.round(spacing / 2));
    }
    if (room.west == 'Normal') {
        line(true_x - Math.round(spacing / 2), true_y + Math.round(size / 2),
             true_x, true_y + Math.round(size / 2));
    }
    
    // room background color according to type
    if (room.type == 'road') {
        fill(#AA6E27);
    } else if (room.type == 'water') {
        fill(#3292dc);
    } else if (room.type == 'field') {
        fill(#27aa42);
    } else if (room.type == 'city') {
        fill(#D7CBB9);
    } else if (room.type == 'shop') {
        fill(#f5d494);
    }
    
    // highlight player room if applicable
    if (is_player_room) {
        stroke(#0000ff);
        strokeWeight(2);
    }
    
    rect(true_x, true_y, size, size);

    // reset to defaults before leaving
    stroke(0);
    strokeWeight(1);

}

void draw() 
{
    background(#EEEEEE);
    if ($(stark).attr('map')) {

        // smooth motion animation
        if (!center_x || !center_y) { // initialization
            center_x = stark.map.x;
            center_y = stark.map.y;
        }
        else {
            center_x += (stark.map.x - center_x) / delay;
            center_y += (stark.map.y - center_y) / delay;
        }
        
        var is_player_room;
        $.each(stark.map, function(key, object) {
            // don't render hidden rooms or anything that's not a room
            // (which for now means doesn't have a type)
            if (!object.type || object.type == 'hidden') { return true; }

            is_player_room = false;
            if ($(stark.room).attr('xpos') == object.xpos &&
                $(stark.room).attr('ypos') == object.ypos) {
                
                is_player_room = true;
            }
            
            draw_room(object, is_player_room);

        });
        
        // center tracker
        /* 
        fill(#FF0000);
        ellipse(Math.round((stark.map.width - 1) / 2) * (size + spacing) + size / 2 + margin,
                Math.round((stark.map.height - 1) / 2) * (size + spacing) + size / 2 + margin,
               10, 10);
        */
        
    }   
}
